// <auto-generated />
using System;
using EFNewFeature.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFNewFeature.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    partial class CoffeeShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FakeDemo.DomainClasses.BrewerType", b =>
                {
                    b.Property<int>("BrewerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrewerTypeId");

                    b.ToTable("BrewerTypes");

                    b.HasData(
                        new
                        {
                            BrewerTypeId = 1,
                            Description = "Glass Hourglass Drip"
                        },
                        new
                        {
                            BrewerTypeId = 2,
                            Description = "Hand Press"
                        },
                        new
                        {
                            BrewerTypeId = 3,
                            Description = "Cold Brew"
                        });
                });

            modelBuilder.Entity("FakeDemo.DomainClasses.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloseTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("09236e34-5f9e-437c-a04a-a9155659c084"),
                            CloseTime = "4PM",
                            OpenTime = "6AM",
                            StreetAddress = "999 Main Street"
                        });
                });

            modelBuilder.Entity("FakeDemo.DomainClasses.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Acquired")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BrewTypeBrewerTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UnitId");

                    b.HasIndex("BrewTypeBrewerTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Acquired = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = new Guid("09236e34-5f9e-437c-a04a-a9155659c084")
                        },
                        new
                        {
                            UnitId = 2,
                            Acquired = new DateTime(2018, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FakeDemo.DomainClasses.BrewerType", b =>
                {
                    b.OwnsOne("FakeDemo.DomainClasses.Recipe", "Recipe", b1 =>
                        {
                            b1.Property<int>("BrewerTypeId")
                                .HasColumnType("int");

                            b1.Property<int>("BrewMinutes")
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("GrindOunces")
                                .HasColumnType("int");

                            b1.Property<int>("GrindSize")
                                .HasColumnType("int");

                            b1.Property<int>("WaterOunces")
                                .HasColumnType("int");

                            b1.Property<int>("WaterTemperature")
                                .HasColumnType("int");

                            b1.HasKey("BrewerTypeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("BrewerTypeId");

                            b1.HasData(
                                new
                                {
                                    BrewerTypeId = 1,
                                    BrewMinutes = 3,
                                    Description = "so good",
                                    GrindOunces = 5,
                                    GrindSize = 2,
                                    WaterOunces = 1,
                                    WaterTemperature = 60
                                });
                        });
                });

            modelBuilder.Entity("FakeDemo.DomainClasses.Unit", b =>
                {
                    b.HasOne("FakeDemo.DomainClasses.BrewerType", "BrewType")
                        .WithMany()
                        .HasForeignKey("BrewTypeBrewerTypeId");

                    b.HasOne("FakeDemo.DomainClasses.Location", "Location")
                        .WithMany("BrewingUnits")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
